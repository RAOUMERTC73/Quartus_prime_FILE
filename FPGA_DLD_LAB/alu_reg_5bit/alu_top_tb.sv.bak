module alu_top_tb;

  reg [9:0] SW;
  reg [2:0] KEY;
  wire [4:0] LEDR;
  wire [6:0] HEX0;

  // Instantiate the module
  alu_top uut (
    .SW(SW),
    .KEY(KEY),
    .LEDR(LEDR),
    .HEX0(HEX0)
  );

  // Testbench stimulus
  initial begin
    // Initialize inputs
    SW = 10'b0;
    KEY = 3'b0;

    // Test case 1: Addition
    #5 SW = 10'b0000010101; // 5 + 1
    #5 KEY = 3'b010;        // Addition operation

    // Test case 2: Subtraction
    #5 SW = 10'b0000110101; // 13 - 5
    #5 KEY = 3'b110;        // Subtraction operation

    // Test case 3: Multiplication
    #5 SW = 10'b0000001101; // 3 * 1
    #5 KEY = 3'b001;        // Multiplication operation

    // Test case 4: Division
    #5 SW = 10'b0000100010; // 8 / 2
    #5 KEY = 3'b011;        // Division operation

    // Test case 5: Bitwise AND
    #5 SW = 10'b0001101001; // 9 & 5
    #5 KEY = 3'b100;        // Bitwise AND operation

    // Test case 6: Bitwise OR
    #5 SW = 10'b0001101001; // 9 | 5
    #5 KEY = 3'b101;        // Bitwise OR operation

    // Monitor outputs
    $monitor("Time=%0t SW=%b KEY=%b LEDR=%b HEX0=%b", $time, SW, KEY, LEDR, HEX0);

    // Run simulation for a while
    #100 $finish;
  end


endmodule
